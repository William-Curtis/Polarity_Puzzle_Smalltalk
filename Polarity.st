'From Pharo12.0.0SNAPSHOT of 23 January 2025 [Build information: Pharo-12.0.0+SNAPSHOT.build.1554.sha.390cc1c8cdf73aa641b5a4538aab02adadaf330a (64 Bit)] on 23 February 2025 at 4:26:03.099 pm'!Object subclass: #Polarity	instanceVariableNames: 'board specs checked'	classVariableNames: ''	package: 'CPS506'!!Polarity methodsFor: 'adding' stamp: '2/18/2025 17:29'!addBoard: board1	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|  |	board := board1 copy! !!Polarity methodsFor: 'adding' stamp: '2/18/2025 17:56'!addSpecs: specs1	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|  |	specs := specs1.	checked:= true.! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/11/2025 15:55'!getBoard	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|  |	^board ! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/11/2025 16:04'!updateBoard	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|  |	1 to: (board size) do: [ :row |		1 to: ((board at: row) size) do: [ :col |			((board at: row) at: col) = $L ifTrue: [				((board at: row) at: (col + 1)) = $+ ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: row) at: (col + 1)) = $- ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: row) at: (col + 1)) = $X ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				]			].			((board at: row) at: col) = $R ifTrue: [				((board at: row) at: (col - 1)) = $+ ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: row) at: (col - 1)) = $- ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: row) at: (col - 1)) = $X ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				]			].			((board at: row) at: col) = $T ifTrue: [				((board at: (row + 1)) at: col) = $+ ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: (row + 1)) at: col) = $- ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: (row + 1)) at: col) = $X ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				]			].			((board at: row) at: col) = $B ifTrue: [				((board at: (row - 1)) at: col) = $+ ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: (row - 1)) at: col) = $- ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				].				((board at: (row - 1)) at: col) = $X ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: (board at: row) size)				]			].		]	].! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/23/2025 16:10'!updateSpecs	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"		"left and right is satisfied, set all L, R, T, and B to X in the row [+]"	"top and bottom is satisfied, set all L, R, T, and B to X in the col [+]"	"left or right is satisfied, set all L and R to X in the row [+]"	"top or bottom is satisfied, set all T and B to X in the col [+]"	"left + right = cols - X - L/R pairs (- pos - neg canceled out), L and R must be + or - (check adjacentcy for parity, if none then skip for later) [+]"	"left (no right) = cols - X - L/R pairs - neg, L and R must be + or - [+]"	"(no left) right = cols - X - L/R pairs - pos, L and R must be + or - [+]"	"top + bottom = rows - X - T/B pairs (- pos - neg canceled out), T and B must be + or - (check adjacentcy for parity, if none then skip for later) [+]"	"top (no bottom) = rows - X - T/B pairs - neg, T and B must be + or - [+]"	"(no top) bottom = rows - X - T/B pairs - pos, T and B must be + or - [+]"	"tile adjacent to + and -, it must be X [+]"	"left/top = row/col - X - neg, L/R/T/B must be pos [+]"	"right/bottom = row/col - X - pos, L/R/T/B must be neg [+]"	"row - left - right - X = 1, check pairs"	| pos neg X pairs pnp nnp counter targetRow targetCol |		checked := false.	1 to: (board size) do: [ :row |		1 to: ((board at: row) size) do: [ :col |			pos := 0.			neg := 0.			(((board at: row) at: col) = $X) | (((board at: row) at: col) = $+) | (((board at: row) at: col) = $-) ifFalse: [				(row > 1) ifTrue: [					((board at: (row - 1)) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [						((board at: (row - 1)) at: col) = $- ifTrue: [ neg := neg + 1]					]				].				(row < (board size)) ifTrue: [					((board at: (row + 1)) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [						((board at: (row + 1)) at: col) = $- ifTrue: [ neg := neg + 1]					]				].				(col > 1) ifTrue: [					((board at: row) at: (col - 1)) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [						((board at: row) at: (col - 1)) = $- ifTrue: [ neg := neg + 1]					]				].				(col < (board at: row) size) ifTrue: [					((board at: row) at: (col + 1)) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [						((board at: row) at: (col + 1)) = $- ifTrue: [ neg := neg + 1]					]				].								(pos > 0) & (neg > 0) ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).					self updateBoard.					checked := true				]			]		]	].	(checked not) ifTrue: [	1 to: (board size) do: [ :row |		pos := 0.		neg := 0.		1 to: ((board at: row) size) do: [ :col |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ].			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ].		].		(((specs at: 'left') at: row) = pos) & (((specs at: 'right') at: row) = neg) ifTrue: [			1 to: ((board at: row) size) do: [ :col |				(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).					self updateBoard.					checked := true				]			]		] ifFalse: [			(((specs at: 'left') at: row) = pos) | (((specs at: 'right') at: row) = neg) ifTrue: [				1 to: ((board at: row) size) do: [ :col |					(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).						self updateBoard.						checked := true					]				]			]		]	]].	(checked not) ifTrue: [	1 to: ((specs at: 'top') size) do: [ :col |		pos := 0.		neg := 0.		1 to: (board size) do: [ :row |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ].			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ].					].		(((specs at: 'top') at: col) = pos) & (((specs at: 'bottom') at: col) = neg) ifTrue: [			1 to: (board size) do: [ :row |				(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [					board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).					self updateBoard.					checked := true				]			]		] ifFalse: [			(((specs at: 'top') at: col) = pos) | (((specs at: 'bottom') at: col) = neg) ifTrue: [				1 to: (board size) do: [ :row |					(((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).						self updateBoard.						checked := true					]				]			]		]	]].	(checked not) ifTrue: [	1 to: (board size) do: [ :row |		pos := 0.		neg := 0.		counter := 0.		1 to: ((board at: row) size) do: [ :col |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ] ifFalse: [			(((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [ counter := counter + 1 ]]]		].		((((specs at: 'left') at: row) - pos) = (((specs at: 'right') at: row) - neg)) & (counter < 2) & ((((specs at: 'left') at: row) = -1) not) & ((((specs at: 'right') at: row) = -1) not) ifTrue: [			1 to: ((board at: row) size) do: [ :col |			(((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				self updateBoard.				checked := true			]		].		]	]].	(checked not) ifTrue: [	1 to: ((specs at: 'top') size) do: [ :col |		pos := 0.		neg := 0.		counter := 0.		1 to: (board size) do: [ :row |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ] ifFalse: [			(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) ifTrue: [ counter := counter + 1 ]]]		].		((((specs at: 'top') at: col) - pos) = (((specs at: 'bottom') at: col) - neg)) & (counter < 2) & ((((specs at: 'top') at: col) = -1) not) & ((((specs at: 'bottom') at: col) = -1) not) ifTrue: [			1 to: (board size) do: [ :row |			(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				self updateBoard.				checked := true			]		].		]	]].	(checked not) ifTrue: [	1 to: (board size) do: [ :row |		pos := 0.		neg := 0.		X := 0.		pnp := 0.		nnp := 0.		1 to: ((board at: row) size) do: [ :col |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ] ifFalse: [			((board at: row) at: col) = $X ifTrue: [ X := X + 1 ] ifFalse: [			((self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+)) ifFalse: [ pnp := pnp + 1 ].			((self isPossible: row and: col with: $-) & (self isPossibleSpec: row and: col with: $-)) ifFalse: [ nnp := nnp + 1 ]			]]]		].		((specs at: 'left') at: row) = (((((board at: row) size) - X) - neg) - pnp) ifTrue: [			1 to: ((board at: row) size) do: [ :col |				(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [					(checked not) & (self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).						self updateBoard.						checked := true					]				]			]].		((specs at: 'right') at: row) = (((((board at: row) size) - X) - pos) - nnp) ifTrue: [			1 to: ((board at: row) size) do: [ :col |				(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [					(checked not) & (self isPossible: row and: col with: $-) & (self isPossibleSpec: row and: col with: $-) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).						self updateBoard.						checked := true					]				]			]		].	]].	(checked not) ifTrue: [	1 to: ((specs at: 'top') size) do: [ :col |		pos := 0.		neg := 0.		X := 0.		pnp := 0.		nnp := 0.		1 to: (board size) do: [ :row |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ] ifFalse: [			((board at: row) at: col) = $X ifTrue: [ X := X + 1 ] ifFalse: [			((self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+)) ifFalse: [ pnp := pnp + 1 ].			((self isPossible: row and: col with: $-) & (self isPossibleSpec: row and: col with: $-)) ifFalse: [ nnp := nnp + 1 ]			]]]		].		((specs at: 'top') at: col) = ((((board size) - X) - neg) - pnp) ifTrue: [			1 to: (board size) do: [ :row |				(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [					(checked not) & (self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).						self updateBoard.						checked := true				]]			]].		((specs at: 'bottom') at: col) = ((((board size) - X) - pos) - nnp) ifTrue: [			1 to: (board size) do: [ :row |				(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [					(checked not) & (self isPossible: row and: col with: $-) & (self isPossibleSpec: row and: col with: $-) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).						self updateBoard.						checked := true				]]			]		].	]].	(checked not) ifTrue: [	1 to: (board size) do: [ :row |		pos := 0.		neg := 0.		X := 0.		pairs := 0.		1 to: ((board at: row) size) do: [ :col |			(((board at: row) at: col) = $+) ifTrue: [				pos := pos + 1			] ifFalse: [			(((board at: row) at: col) = $-) ifTrue: [				neg := neg + 1			] ifFalse: [			(((board at: row) at: col) = $X) ifTrue: [				X := X + 1			] ifFalse: [			(((board at: row) at: col) = $L) ifTrue: [				pairs := pairs + 1			]]]]		].		(((specs at: 'left') at: row) = -1) | (((specs at: 'right') at: row) = -1) ifTrue: [			((specs at: 'left') at: row) = -1 ifTrue: [				((specs at: 'right') at: row) = -1 ifFalse: [					((specs at: 'right') at: row) = (((((specs at: 'top') size) - X) - pairs) - pos) ifTrue: [						1 to: ((board at: row) size) do: [ :col |							(checked not) & (((board at: row) at: col) = $L) ifTrue: [								self checkPair: row and: col.							] ifFalse: [								(checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R)) ifTrue: [									board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).									self updateBoard.									checked := true								]							]						]					]				]			] ifFalse: [				((specs at: 'left') at: row) = (((((specs at: 'top') size) - X) - pairs) - neg) ifTrue: [					1 to: ((board at: row) size) do: [ :col |						(checked not) & (((board at: row) at: col) = $L) ifTrue: [							(checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R)) ifTrue: [								board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).								self updateBoard.								checked := true							]						]					]				]			]		]	]].	(checked not) ifTrue: [	1 to: ((specs at: 'top') size) do: [ :col |		pos := 0.		neg := 0.		X := 0.		pairs := 0.		1 to: (board size) do: [ :row |			(((board at: row) at: col) = $+) ifTrue: [				pos := pos + 1			] ifFalse: [			(((board at: row) at: col) = $-) ifTrue: [				neg := neg + 1			] ifFalse: [			(((board at: row) at: col) = $X) ifTrue: [				X := X + 1			] ifFalse: [			(((board at: row) at: col) = $T) ifTrue: [				pairs := pairs + 1			]]]]		].		(((specs at: 'top') at: col) = -1) | (((specs at: 'bottom') at: col) = -1) ifTrue: [			((specs at: 'top') at: col) = -1 ifTrue: [				((specs at: 'bottom') at: col) = -1 ifFalse: [					((specs at: 'bottom') at: col) = ((((board size) - X) - pairs) - pos) ifTrue: [						1 to: (board size) do: [ :row |							(checked not) & (((board at: row) at: col) = $T) ifTrue: [								self checkPair: row and: col.							] ifFalse: [								(checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R)) ifTrue: [									board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).									self updateBoard.									checked := true								]							]						]					]				]			] ifFalse: [				((specs at: 'top') at: col) = ((((board size) - X) - pairs) - neg) ifTrue: [					1 to: (board size) do: [ :row |						(checked not) & (((board at: row) at: col) = $T) ifTrue: [							self checkPair: row and: col.						] ifFalse: [							(checked not) & ((((board at: row) at: col) = $L) | ((((board at: row)) at: col) = $R)) ifTrue: [								board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).								self updateBoard.								checked := true							]						]					]				]			]		]	]].		(checked not) ifTrue: [	1 to: (board size) do: [ :row |		X := 0.		1 to: ((board at: row) size) do: [ :col | ((board at: row) at: col) = $X ifTrue: [ X := X + 1 ] ].		"cols - left - right - X = 1, check pairs"		(((((specs at: 'top') size) - ((specs at: 'left') at: row)) - ((specs at: 'right') at: row)) - X) = 1 ifTrue: [			1 to: ((board at: row) size) do: [ :col |				(((board at: row) at: col) = $L) ifTrue: [ 					((checked not) & (self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+)) ifTrue: [						self checkPair: row and: col.					] ifFalse: [					((checked not) & (self isPossible: row and: col with: $-) & (self isPossibleSpec: row and: col with: $-)) ifTrue: [						self checkPair: row and: col.					]]				]			]		]	]].		(checked not) ifTrue: [	1 to: ((specs at: 'left') size) do: [ :col |		X := 0.		1 to: (board size) do: [ :row | ((board at: row) at: col) = $X ifTrue: [ X := X + 1 ] ].		"rows - top - bottom - X = 1, check pairs"		((((board size) - ((specs at: 'top') at: col)) - ((specs at: 'bottom') at: col)) - X) = 1 ifTrue: [			1 to: (board size) do: [ :row |				(((board at: row) at: col) = $T) ifTrue: [					((checked not) & (self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+)) ifTrue: [						self checkPair: row and: col.					] ifFalse: [					((checked not) & (self isPossible: row and: col with: $-) & (self isPossibleSpec: row and: col with: $-)) ifTrue: [						self checkPair: row and: col.					]]				]			]		]	]].	(checked not) ifTrue: [		1 to: (board size) do: [ :row |		pos := 0.		neg := 0.		X := 0.		targetCol := -1.		targetRow := -1.		1 to: ((board at: row) size) do: [ :col |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1. targetCol := col ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1. targetRow := col ] ifFalse: [			((board at: row) at: col) = $X ifTrue: [ X := X + 1 ]			]]		].		(((specs at: 'left') at: row) \\ 2 = 0) & ((((specs at: 'left') at: row) - pos) = ((((((specs at: 'top') size) - pos) - neg) - X)/2)) ifTrue: [			(targetCol = -1) ifFalse: [				(targetCol\\2) to: ((specs at: 'top') size) by: 2 do: [ :i |					(checked not) & ((i = 0) not) ifTrue: [					((i = targetCol) not) & (self isPossibleSpec: row and: i with: $+) & ((((board at: row) at: i) = $L) | (((board at: row) at: i) = $R) | (((board at: row) at: i) = $T) | (((board at: row) at: i) = $B)) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: i - 1), '+', ((board at: row) copyFrom: i + 1 to: ((board at: row) size)).						self updateBoard.						checked := true				]]			]]		].		(((specs at: 'right') at: row) \\ 2 = 0) & ((((specs at: 'right') at: row) - pos) = ((((((specs at: 'top') size) - pos) - neg) - X)/2)) ifTrue: [			(targetRow = -1) ifFalse: [				(targetRow\\2) to: ((specs at: 'top') size) by: 2 do: [ :i |					(checked not) & ((i = 0) not) ifTrue: [					((i = targetRow) not) & (self isPossibleSpec: row and: i with: $-) & ((((board at: row) at: i) = $L) | (((board at: row) at: i) = $R) | (((board at: row) at: i) = $T) | (((board at: row) at: i) = $B)) ifTrue: [						board at: row put: ((board at: row) copyFrom: 1 to: i - 1), '-', ((board at: row) copyFrom: i + 1 to: ((board at: row) size)).						self updateBoard.						checked := true				]]			]]		]	]].	(checked not) ifTrue: [		1 to: ((specs at: 'top') size) do: [ :col |		pos := 0.		neg := 0.		X := 0.		targetCol := -1.		targetRow := -1.		1 to: (board size) do: [ :row |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1. targetCol := row ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1. targetRow := row ] ifFalse: [			((board at: row) at: col) = $X ifTrue: [ X := X + 1 ]			]]		].		(((specs at: 'top') at: col) \\ 2 = 0) & ((((specs at: 'top') at: col) - pos) = ((((((specs at: 'left') size) - pos) - neg) - X)/2)) ifTrue: [			(targetCol = -1) ifFalse: [				(targetCol\\2) to: ((specs at: 'left') size) by: 2 do: [ :i |					(checked not) & ((i = 0) not) ifTrue: [					((i = targetCol) not) & (self isPossibleSpec: i and: col with: $+) & ((((board at: i) at: col) = $L) | (((board at: i) at: col) = $R) | (((board at: i) at: col) = $T) | (((board at: i) at: col) = $B)) ifTrue: [						board at: i put: ((board at: i) copyFrom: 1 to: col - 1), '+', ((board at: i) copyFrom: col + 1 to: ((board at: i) size)).						self updateBoard.						checked := true				]]			]]		].		(((specs at: 'bottom') at: col) \\ 2 = 0) & ((((specs at: 'bottom') at: col) - pos) = ((((((specs at: 'left') size) - pos) - neg) - X)/2)) ifTrue: [			(targetRow = -1) ifFalse: [				(targetRow\\2) to: ((specs at: 'left') size) by: 2 do: [ :i |					(checked not) & ((i = 0) not) ifTrue: [					((i = targetRow) not) & (self isPossibleSpec: i and: col with: $-) & ((((board at: i) at: col) = $L) | (((board at: i) at: col) = $R) | (((board at: i) at: col) = $T) | (((board at: i) at: col) = $B)) ifTrue: [						board at: i put: ((board at: i) copyFrom: 1 to: col - 1), '-', ((board at: i) copyFrom: col + 1 to: ((board at: i) size)).						self updateBoard.						checked := true				]]			]]		]	]].		(checked not) ifTrue: [	1 to: (board size) do: [ :row |		pos := 0.		neg := 0.		X := 0.		1 to: ((board at: row) size) do: [ :col |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ] ifFalse: [			((board at: row) at: col) = $X ifTrue: [ X := X + 1 ]			]]		].		"spec - pos/neg > rem rows/cols // 2"		((((specs at: 'left') at: row) - pos) > ((((((specs at: 'top') size) - pos) - neg) - X)//2)) ifTrue: [			counter := 0.			targetCol := -1.			1 to: ((board at: row) size) do: [ :col |				((checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B))) ifTrue: [					counter := counter + 1.					(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) ifTrue: [ targetCol := col ].					(col = ((specs at: 'top') size)) ifTrue: [						((counter // 2) = 1) ifTrue: [							(targetCol = -1) ifTrue: [ targetCol := col ].							board at: row put: ((board at: row) copyFrom: 1 to: targetCol - 1), '+', ((board at: row) copyFrom: targetCol + 1 to: ((board at: row) size)).							self updateBoard.							checked := true						]					] ifFalse: [(((board at: row) at: (col + 1)) = $X) | (((board at: row) at: (col + 1)) = $+) | (((board at: row) at: (col + 1)) = $-) ifTrue: [						((counter // 2) = 1) ifTrue: [							(targetCol = -1) ifTrue: [ targetCol := col ].							board at: row put: ((board at: row) copyFrom: 1 to: targetCol - 1), '+', ((board at: row) copyFrom: targetCol + 1 to: ((board at: row) size)).							self updateBoard.							checked := true						]					]]				] ifFalse: [ counter := 0 ]			]		].		((((specs at: 'right') at: row) - neg) > ((((((specs at: 'top') size) - pos) - neg) - X)//2)) ifTrue: [			counter := 0.			targetCol := -1.			1 to: ((board at: row) size) do: [ :col |				((checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B))) ifTrue: [					counter := counter + 1.					(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) ifTrue: [ targetCol := col ].					(col = ((specs at: 'top') size)) ifTrue: [						((counter \\ 2) = 1) ifTrue: [							(targetCol = -1) ifTrue: [ targetCol := col ].							board at: row put: ((board at: row) copyFrom: 1 to: targetCol - 1), '-', ((board at: row) copyFrom: targetCol + 1 to: ((board at: row) size)).							self updateBoard.							checked := true						]					] ifFalse: [(((board at: row) at: (col + 1)) = $X) | (((board at: row) at: (col + 1)) = $+) | (((board at: row) at: (col + 1)) = $-) ifTrue: [						((counter \\ 2) = 1) ifTrue: [							(targetCol = -1) ifTrue: [ targetCol := col ].							board at: row put: ((board at: row) copyFrom: 1 to: targetCol - 1), '-', ((board at: row) copyFrom: targetCol + 1 to: ((board at: row) size)).							self updateBoard.							checked := true						]					]]				] ifFalse: [ counter := 0 ]			]			]		].	].		(checked not) ifTrue: [	1 to: ((specs at: 'top') size) do: [ :col |		pos := 0.		neg := 0.		X := 0.		1 to: (board size) do: [ :row |			((board at: row) at: col) = $+ ifTrue: [ pos := pos + 1 ] ifFalse: [			((board at: row) at: col) = $- ifTrue: [ neg := neg + 1 ] ifFalse: [			((board at: row) at: col) = $X ifTrue: [ X := X + 1 ]			]]		].				((((specs at: 'top') at: col) - pos) > ((((((specs at: 'left') size) - pos) - neg) - X)//2)) ifTrue: [			counter := 0.			targetRow := -1.			1 to: (board size) do: [ :row |				((checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B))) ifTrue: [					counter := counter + 1.					(((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [ targetRow := row ].					(row = ((specs at: 'left') size)) ifTrue: [						((counter // 2) = 1) ifTrue: [							(targetRow = -1) ifTrue: [ targetRow := row ].							board at: targetRow put: ((board at: targetRow) copyFrom: 1 to: col - 1), '+', ((board at: targetRow) copyFrom: col + 1 to: ((board at: targetRow) size)).							self updateBoard.							checked := true						]					] ifFalse: [(((board at: (row + 1)) at: col) = $X) | (((board at: (row + 1)) at: col) = $+) | (((board at: (row + 1)) at: col) = $-) ifTrue: [						((counter // 2) = 1) ifTrue: [							(targetRow = -1) ifTrue: [ targetRow := row ].							board at: targetRow put: ((board at: targetRow) copyFrom: 1 to: col - 1), '+', ((board at: targetRow) copyFrom: col + 1 to: ((board at: targetRow) size)).							self updateBoard.							checked := true						]					]]				] ifFalse: [ counter := 0 ]			]		].		((((specs at: 'bottom') at: col) - neg) > ((((((specs at: 'left') size) - pos) - neg) - X)//2)) ifTrue: [			counter := 0.			targetRow := -1.			1 to: (board size) do: [ :row |				((checked not) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B))) ifTrue: [					counter := counter + 1.					(((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [ targetRow := row ].					(row = ((specs at: 'left') size)) ifTrue: [						((counter \\ 2) = 1) ifTrue: [							(targetRow = -1) ifTrue: [ targetRow := row ].							board at: targetRow put: ((board at: targetRow) copyFrom: 1 to: col - 1), '-', ((board at: targetRow) copyFrom: col + 1 to: ((board at: targetRow) size)).							self updateBoard.							checked := true						]					] ifFalse: [(((board at: (row + 1)) at: col) = $X) | (((board at: (row + 1)) at: col) = $+) | (((board at: (row + 1)) at: col) = $-) ifTrue: [						((counter \\ 2) = 1) ifTrue: [							(targetRow = -1) ifTrue: [ targetRow := row ].							board at: targetRow put: ((board at: targetRow) copyFrom: 1 to: col - 1), '-', ((board at: targetRow) copyFrom: col + 1 to: ((board at: targetRow) size)).							self updateBoard.							checked := true						]					]]				] ifFalse: [ counter := 0 ]			]			]		].	].	^checked! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/20/2025 16:09'!checkPair: row and: col	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|  |	"Transcript show: row, col; cr.	Transcript show: checked; cr."	((board at: row) at: col) = $L ifTrue: [		(row = 1) ifFalse: [			((board at: (row - 1)) at: col) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-+', ((board at: row) copyFrom: col + 2 to: ((board at: row) size)).				checked := true			] ifFalse: [ 			((board at: (row - 1)) at: col) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+-', ((board at: row) copyFrom: col + 2 to: ((board at: row) size)).				checked := true			]]		].		(row = ((specs at: 'left') size)) ifFalse: [			((board at: (row + 1)) at: col) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-+', ((board at: row) copyFrom: col + 2 to: ((board at: row) size)).				checked := true			] ifFalse: [ 			((board at: (row + 1)) at: col) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+-', ((board at: row) copyFrom: col + 2 to: ((board at: row) size)).				checked := true			]]		].		(col = 1) ifFalse: [			((board at: row) at: (col - 1)) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-+', ((board at: row) copyFrom: col + 2 to: ((board at: row) size)).				checked := true			] ifFalse: [ 			((board at: row) at: (col - 1)) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+-', ((board at: row) copyFrom: col + 2 to: ((board at: row) size)).				checked := true			]]		]	] ifFalse: [	((board at: row) at: col) = $R ifTrue: [		(row = 1) ifFalse: [			((board at: (row - 1)) at: col) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 2), '+-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				checked := true			] ifFalse: [ 			((board at: (row - 1)) at: col) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 2), '-+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				checked := true			]]		].		(row = ((specs at: 'left') size)) ifFalse: [			((board at: (row + 1)) at: col) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 2), '+-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				checked := true			] ifFalse: [ 			((board at: (row + 1)) at: col) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 2), '-+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				checked := true			]]		].		(col = ((specs at: 'top') size)) ifFalse: [			((board at: row) at: (col + 1)) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 2), '+-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				checked := true			] ifFalse: [ 			((board at: row) at: (col + 1)) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 2), '-+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				checked := true			]]		]	] ifFalse: [	((board at: row) at: col) = $T ifTrue: [		(row = 1) ifFalse: [			((board at: (row - 1)) at: col) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row + 1) put: ((board at: (row + 1)) copyFrom: 1 to: col - 1), '+', ((board at: (row + 1)) copyFrom: col + 1 to: ((board at: (row + 1)) size)).				checked := true			] ifFalse: [ 			((board at: (row - 1)) at: col) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row + 1) put: ((board at: (row + 1)) copyFrom: 1 to: col - 1), '-', ((board at: (row + 1)) copyFrom: col + 1 to: ((board at: (row + 1)) size)).				checked := true			]]		].		(col = 1) ifFalse: [			((board at: row) at: (col - 1)) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row + 1) put: ((board at: (row + 1)) copyFrom: 1 to: col - 1), '+', ((board at: (row + 1)) copyFrom: col + 1 to: ((board at: (row + 1)) size)).				checked := true			] ifFalse: [ 			((board at: row) at: (col - 1)) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row + 1) put: ((board at: (row + 1)) copyFrom: 1 to: col - 1), '-', ((board at: (row + 1)) copyFrom: col + 1 to: ((board at: (row + 1)) size)).				checked := true			]]		].		(col = ((specs at: 'top') size)) ifFalse: [			((board at: row) at: (col + 1)) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row + 1) put: ((board at: (row + 1)) copyFrom: 1 to: col - 1), '+', ((board at: (row + 1)) copyFrom: col + 1 to: ((board at: (row + 1)) size)).				checked := true			] ifFalse: [ 			((board at: row) at: (col + 1)) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row + 1) put: ((board at: (row + 1)) copyFrom: 1 to: col - 1), '-', ((board at: (row + 1)) copyFrom: col + 1 to: ((board at: (row + 1)) size)).				checked := true			]]		]	] ifFalse: [	((board at: row) at: col) = $B ifTrue: [		(row = ((specs at: 'left') size)) ifFalse: [			((board at: (row + 1)) at: col) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row - 1) put: ((board at: (row - 1)) copyFrom: 1 to: col - 1), '+', ((board at: (row - 1)) copyFrom: col + 1 to: ((board at: (row - 1)) size)).				checked := true			] ifFalse: [ 			((board at: (row + 1)) at: col) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row - 1) put: ((board at: (row - 1)) copyFrom: 1 to: col - 1), '-', ((board at: (row - 1)) copyFrom: col + 1 to: ((board at: (row - 1)) size)).				checked := true			]]		].		(col = 1) ifFalse: [			((board at: row) at: (col - 1)) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row - 1) put: ((board at: (row - 1)) copyFrom: 1 to: col - 1), '+', ((board at: (row - 1)) copyFrom: col + 1 to: ((board at: (row - 1)) size)).				checked := true			] ifFalse: [ 			((board at: row) at: (col - 1)) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row - 1) put: ((board at: (row - 1)) copyFrom: 1 to: col - 1), '-', ((board at: (row - 1)) copyFrom: col + 1 to: ((board at: (row - 1)) size)).				checked := true			]]		].		(col = ((specs at: 'top') size)) ifFalse: [			((board at: row) at: (col + 1)) = $+ ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '-', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row - 1) put: ((board at: (row - 1)) copyFrom: 1 to: col - 1), '+', ((board at: (row - 1)) copyFrom: col + 1 to: ((board at: (row - 1)) size)).				checked := true			] ifFalse: [ 			((board at: row) at: (col + 1)) = $- ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), '+', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				board at: (row - 1) put: ((board at: (row - 1)) copyFrom: 1 to: col - 1), '-', ((board at: (row - 1)) copyFrom: col + 1 to: ((board at: (row - 1)) size)).				checked := true			]]		]	]]]].	"Transcript show: checked; cr."! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/20/2025 12:51'!isPossible: row and: col with: polarity	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	| oppPolarity |	(polarity = $+) ifTrue: [ oppPolarity := $- ] ifFalse: [ oppPolarity := $+ ].	((board at: row) at: col) = $L ifTrue: [		(col > 1) ifTrue: [			((board at: row) at: (col - 1)) = polarity ifTrue: [				^false			]		].		"<R>"		(col < ((specs at: 'top') size)) ifTrue: [			((col + 1) < ((specs at: 'top') size)) ifTrue: [			((board at: row) at: (col + 2)) = oppPolarity ifTrue: [				^false			]		].		(row > 1) ifTrue: [			((board at: (row - 1)) at: (col + 1)) = oppPolarity ifTrue: [				^false			]		].		(row < (board size)) ifTrue: [			((board at: (row + 1)) at: (col + 1)) = oppPolarity ifTrue: [				^false			]]		].		"</R>"		(row > 1) ifTrue: [			((board at: (row - 1)) at: col) = polarity ifTrue: [				^false			]		].		(row < (board size)) ifTrue: [			((board at: (row + 1)) at: col) = polarity ifTrue: [				^false			]		]] ifFalse: [	((board at: row) at: col) = $R ifTrue: [		"<L>"		(col > 1) ifTrue: [			((col - 1) > 1) ifTrue: [				((board at: row) at: (col - 2)) = oppPolarity ifTrue: [					^false				]			].			(row > 1) ifTrue: [				((board at: (row - 1)) at: (col - 1)) = oppPolarity ifTrue: [					^false				]			].			(row < (board size)) ifTrue: [				((board at: (row + 1)) at: (col - 1)) = oppPolarity ifTrue: [					^false				]			]		].		"</L>"		(col < ((specs at: 'top') size)) ifTrue: [			((board at: row) at: (col + 1)) = polarity ifTrue: [				^false			]		].		(row > 1) ifTrue: [			((board at: (row - 1)) at: col) = polarity ifTrue: [				^false			]		].		(row < (board size)) ifTrue: [			((board at: (row + 1)) at: col) = polarity ifTrue: [				^false			]		]	] ifFalse: [	((board at: row) at: col) = $T ifTrue: [		(col > 1) ifTrue: [			((board at: row) at: (col - 1)) = polarity ifTrue: [				^false			]		].		(col < ((specs at: 'top') size)) ifTrue: [			((board at: row) at: (col + 1)) = polarity ifTrue: [				^false			]		].		(row > 1) ifTrue: [			((board at: (row - 1)) at: col) = polarity ifTrue: [				^false			]		].		"<B>"		(row < (board size)) ifTrue: [			(col > 1) ifTrue: [				((board at: (row + 1)) at: (col - 1)) = oppPolarity ifTrue: [					^false				]			].			(col < ((specs at: 'top') size)) ifTrue: [				((board at: (row + 1)) at: (col + 1)) = oppPolarity ifTrue: [					^false				]			].			((row + 1) < (board size)) ifTrue: [				((board at: (row + 2)) at: col) = oppPolarity ifTrue: [					^false				]			]		]		"</B>"	] ifFalse: [	((board at: row) at: col) = $B ifTrue: [		(col > 1) ifTrue: [			((board at: row) at: (col - 1)) = polarity ifTrue: [				^false			]		].		(col < ((specs at: 'top') size)) ifTrue: [			((board at: row) at: (col + 1)) = polarity ifTrue: [				^false			]		].		"<T>"		(row > 1) ifTrue: [			(col > 1) ifTrue: [				((board at: (row - 1)) at: (col - 1)) = oppPolarity ifTrue: [					^false				]			].			(col < ((specs at: 'top') size)) ifTrue: [				((board at: (row - 1)) at: (col + 1)) = oppPolarity ifTrue: [					^false				]			].			((row - 1) > 1) ifTrue: [				((board at: (row - 2)) at: col) = oppPolarity ifTrue: [					^false				]			]		].		"</T>"		(row < (board size)) ifTrue: [			((board at: (row + 1)) at: col) = polarity ifTrue: [				^false			]		]	]]]].	^true! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/18/2025 17:46'!getChecked	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	|  |	^checked! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/23/2025 16:04'!noForcedMove	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	| targetRow targetCol |	targetRow := 0.	targetCol := 0.	1 to: (board size) do: [ :row |		1 to: ((board at: row) size) do: [ :col |			((self isPossible: row and: col with: $+) & (self isPossibleSpec: row and: col with: $+)) & ((((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B)) ifTrue: [				targetRow = 0 ifTrue: [ targetRow := row ].				targetCol = 0 ifTrue: [ targetCol := col ].				(self notXPair: row and: col) ifTrue: [ targetRow := row. targetCol := col ]			]		]	].	(targetRow = 0) | (targetCol = 0) ifTrue: [ checked := false ] ifFalse: [		board at: targetRow put: ((board at: targetRow) copyFrom: 1 to: targetCol - 1), '+', ((board at: targetRow) copyFrom: targetCol + 1 to: ((board at: targetRow) size)).		self updateBoard.		checked := true.		^true.	].	1 to: (board size) do: [ :row |		1 to: ((board at: row) size) do: [ :col |			(((board at: row) at: col) = $L) | (((board at: row) at: col) = $R) | (((board at: row) at: col) = $T) | (((board at: row) at: col) = $B) ifTrue: [				board at: row put: ((board at: row) copyFrom: 1 to: col - 1), 'X', ((board at: row) copyFrom: col + 1 to: ((board at: row) size)).				self updateBoard			]		]	]! !!Polarity methodsFor: 'as yet unclassified' stamp: '2/21/2025 12:19'!notXPair: targetRow and: targetCol	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	"bottom = rows - pos - X - pairs"		| pos neg X pairs |	pos := 0.	neg := 0.	X := 0.	pairs := 0.	1 to: (board size) do: [ :row |		(((board at: row) at: targetCol) = $+) ifTrue: [ pos := pos + 1 ] ifFalse: [		(((board at: row) at: targetCol) = $-) ifTrue: [ neg := neg + 1 ] ifFalse: [		(((board at: row) at: targetCol) = $X) ifTrue: [ X := X + 1 ] ifFalse: [		(((board at: row) at: targetCol) = $T) ifTrue: [ pairs := pairs + 1 ]]]].		(((specs at: 'top') at: targetCol) = (((((board size)) - neg) - X) - pairs)) ifTrue: [ ^true ].		(((specs at: 'bottom') at: targetCol) = (((((board size)) - pos) - X) - pairs)) ifTrue: [ ^true ]	].	pos := 0.	neg := 0.	X := 0.	pairs := 0.		1 to: ((specs at: 'top') size) do: [ :col |		(((board at: targetRow) at: col) = $+) ifTrue: [ pos := pos + 1 ] ifFalse: [		(((board at: targetRow) at: col) = $-) ifTrue: [ neg := neg + 1 ] ifFalse: [		(((board at: targetRow) at: col) = $X) ifTrue: [ X := X + 1 ] ifFalse: [		(((board at: targetRow) at: col) = $L) ifTrue: [ pairs := pairs + 1 ]]]].		(((specs at: 'left') at: targetRow) = ((((((specs at: 'top') size)) - neg) - X) - pairs)) ifTrue: [ ^true ].		(((specs at: 'right') at: targetRow) = ((((((specs at: 'top') size)) - pos) - X) - pairs)) ifTrue: [ ^true ]	].	^false! !!Polarity methodsFor: 'testing' stamp: '2/20/2025 13:02'!isPossibleSpec: targetRow and: targetCol with: polarity 	"comment stating purpose of instance-side method"	"scope: class-variables  &  instance-variables"	| oppPolarity spec |	(polarity = $+) ifTrue: [ spec := specs at: 'top' at: targetCol. oppPolarity := $- ] ifFalse: [ spec := specs at: 'bottom' at: targetCol. oppPolarity := $+ ].	1 to: (board size) do: [ :row |		(((board at: row) at: targetCol) = polarity) ifTrue: [ spec := spec - 1 ]	].	(spec = 0) ifTrue: [ ^false ].	(polarity = $+) ifTrue: [ spec := specs at: 'left' at: targetRow ] ifFalse: [ spec := specs at: 'right' at: targetRow ].	1 to: ((board at: targetRow) size) do: [ :col |		(((board at: targetRow ) at: col) = polarity) ifTrue: [ spec := spec - 1 ]	].	(spec = 0) ifTrue: [ ^false ].	(((board at: targetRow) at: targetCol) = $L) ifTrue: [		(oppPolarity = $+) ifTrue: [ spec := specs at: 'top' at: (targetCol + 1) ] ifFalse: [ spec := specs at: 'bottom' at: (targetCol + 1) ].		1 to: (board size) do: [ :row |			(((board at: row) at: (targetCol + 1)) = oppPolarity) ifTrue: [ spec := spec - 1 ]		].		(spec = 0) ifTrue: [ ^false ]	] ifFalse: [	(((board at: targetRow) at: targetCol) = $R) ifTrue: [		(oppPolarity = $+) ifTrue: [ spec := specs at: 'top' at: (targetCol - 1) ] ifFalse: [ spec := specs at: 'bottom' at: (targetCol - 1) ].		1 to: (board size) do: [ :row |			(((board at: row) at: (targetCol - 1)) = oppPolarity) ifTrue: [ spec := spec - 1 ]		].		(spec = 0) ifTrue: [ ^false ]	] ifFalse: [	(((board at: targetRow) at: targetCol) = $T) ifTrue: [		(oppPolarity = $+) ifTrue: [ spec := specs at: 'left' at: (targetRow + 1) ] ifFalse: [ spec := specs at: 'right' at: (targetRow + 1) ].		1 to: ((board at: (targetRow + 1)) size) do: [ :col |			(((board at: (targetRow + 1)) at: col) = oppPolarity) ifTrue: [ spec := spec - 1 ]		].		(spec = 0) ifTrue: [ ^false ]	] ifFalse: [	(((board at: targetRow) at: targetCol) = $B) ifTrue: [		(oppPolarity = $+) ifTrue: [ spec := specs at: 'left' at: (targetRow - 1) ] ifFalse: [ spec := specs at: 'right' at: (targetRow - 1) ].		1 to: ((board at: (targetRow - 1)) size) do: [ :col |			(((board at: (targetRow - 1)) at: col) = oppPolarity) ifTrue: [ spec := spec - 1 ]		].		(spec = 0) ifTrue: [ ^false ]	]]]].	^true	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Polarity class	instanceVariableNames: ''!!Polarity class methodsFor: 'as yet unclassified' stamp: '2/23/2025 16:23'!solveWith: specs and: board	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"	| polarity |		polarity := Polarity new.		polarity addBoard: board copy.	polarity addSpecs: specs copy.		[ polarity getChecked ] whileTrue: [		polarity updateSpecs.		polarity getChecked ifFalse: [ polarity noForcedMove ]	].	^polarity getBoard! !